[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b2e342a13df6afd3",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/graphql",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 180,
        "wires": [
            [
                "fea3dbe6acbb0815"
            ]
        ]
    },
    {
        "id": "fea3dbe6acbb0815",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "ProcessGraphQL",
        "func": "const { buildSchema, graphql } = graphqlLib;\n\nconst todoListPath = \"/data/todo.json\";\n\n// Helper function to read list from file\nconst readTodoListFromFile = () => {\n    try {\n        if (fs.existsSync(todoListPath)) {\n            const data = JSON.parse(fs.readFileSync(todoListPath, 'utf8'));\n            return data.tasks || [];\n        } else {\n            return [];\n        }\n    } catch(error) {\n        node.warn(`Error writing to file: ${error.message}`);\n        return [];\n    }\n};\n\n// Helper function to write list to file\nconst writeTodoListToFile = (tasks) => {\n    try{\n        fs.writeFileSync(todoListPath, JSON.stringify({tasks: tasks}, null, 2), 'utf8');\n    } catch(error) {\n        node.warn(`Error writing file: ${error.message}`);\n    }\n};\n\n// Helper function to generate \"unique\" id\n// Caution: if used in a synchronous environment, there is a\n//   possibility for ID collisions.\nconst generateUniqueId = () => `task-${Date.now()}`;\n\n// Helper function to validate task inputs\n// Warning: parent function is responsible for error catching\nconst validateTask = (task) => {\n    // Validate task variable types\n    if (typeof task.title !== 'string' || task.title.trim() === '') {\n        throw new Error('Title is required and must be a non-empty string');\n    }\n    if (task.description !== undefined && typeof task.description !== 'string'){\n        throw new Error('Description must be a string');\n    }\n    if (task.completed !== undefined && typeof task.completed !== 'boolean'){\n        throw new Error('Completed must be a boolean');\n    }\n}\n\n// Create schema for our todo list\nconst schema = buildSchema(`\n    type Task {\n        id: ID!\n        title: String!\n        description: String\n        completed: Boolean!\n    }\n    \n    type Query {\n        getTodoList: [Task]\n    }\n    \n    type Mutation {\n        addTask(title: String!, description: String): Task\n        updateTask(id: ID!, title: String, description: String, completed: Boolean): Task\n        deleteTask(id: ID!): String\n    }\n`);\n\n// Provides resolver functions for our endpoints\nconst resolvers = {\n    // Resolver for getting the todo list\n    getTodoList: () => {\n        return readTodoListFromFile();\n    },\n\n    // Resolver for adding a task\n    addTask: ({title, description}) => {\n        try{\n            // Validate task inputs\n            validateTask({title, description});\n\n            // Get current todo list\n            const todoList = readTodoListFromFile();\n\n            // Build new task from request, giving it a unique id\n            const newTask = { id: generateUniqueId(), title, description, completed: false};\n            todoList.push(newTask); // Add new task to list\n\n            // Write new todo list after adding the task\n            writeTodoListToFile(todoList);\n\n            return newTask;\n        } catch (error) {\n            node.warn(`Error adding task: ${error.message}`);\n            return null;\n        }\n    },\n\n    // Resolver for updating a task\n    updateTask: ({id, title, description, completed}) => {\n        try{\n            const todoList = readTodoListFromFile();\n            \n            // Find task with matching id\n            const task = todoList.find(t => t.id === id);\n            if (task) {\n                // Validate new task\n                validateTask({id, title, description, completed});\n\n                // Update task\n                if (title !== undefined) task.title = title;\n                if (description !== undefined) task.description = description;\n                if (completed !== undefined) task.completed = completed;\n                \n                writeTodoListToFile(todoList);\n\n                return task;\n            }\n        } catch(error){\n            node.warn(`Error updating task: ${error.message}`);\n            return null;\n        }\n    },\n\n    // Resolver for deleting a task\n    deleteTask: ({id}) => {\n        try{\n            let todoList = readTodoListFromFile();\n            \n            // Delete task with matching id from list\n            todoList = todoList.filter(task => task.id !== id);\n            writeTodoListToFile(todoList);\n\n            return \"Task deleted\";\n        } catch(error) {\n            node.warn(`Error deleting task: ${error.message}`);\n            return \"Failed to delete task\";\n        }\n    }\n};\n\n// Function to process the given query\nconst processGraphQL = async (query) => {\n    try{\n        const result = await graphql({\n            schema,\n            source: query,\n            rootValue: resolvers\n        });\n        \n        return result;\n    } catch (error) {\n        return { errors: [error.message]};\n    }\n};\n\n// Extract the query from the payload & run it\nconst query = msg.payload.query;\nmsg.payload = await processGraphQL(query);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "graphqlLib",
                "module": "graphql"
            }
        ],
        "x": 470,
        "y": 180,
        "wires": [
            [
                "02177b1aff37c1c7"
            ]
        ]
    },
    {
        "id": "02177b1aff37c1c7",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 180,
        "wires": []
    }
]